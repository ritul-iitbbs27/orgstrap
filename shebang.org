# -*- mode: org; orgstrap-cypher: sha256; orgstrap-norm-func-name: orgstrap-norm-func--dprp-1-0; orgstrap-block-checksum: 7471d2eeba9ea4df25c7051d8620ac09590e48e997c89d655464dc1e4e3260a7; -*-
# [[orgstrap][jump to the orgstrap block for this file]]
#+title: Executable Org files

# [[file:./shebang.pdf]]
# [[file:./shebang.html]]

#+options: num:nil

#+header: :exports code
#+name: orgstrap-shebang
#+begin_src bash :eval never :results none :exports none
{ __p=$(mktemp -d);touch ${__p}/=;chmod +x ${__p}/=;__op=$PATH;PATH=${__p}:$PATH;} > ${null="/dev/null"}
$file= $MyInvocation.MyCommand.Source
$ErrorActionPreference= "silentlycontinue"
file=$0
args=$@
$ErrorActionPreference= "Continue"
{ PATH=$__op;rm ${__p}/=;rmdir ${__p};} > $null
emacs-28 -batch -no-site-file -eval "(let (vc-follow-symlinks) (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp)))) (let ((file (pop argv)) enable-local-variables) (find-file-literally file) (end-of-line) (when (eq (char-before) ?\^m) (let ((coding-system-for-read 'utf-8)) (revert-buffer nil t t)))) (let ((enable-local-eval t) (enable-local-variables :all) (major-mode 'org-mode)) (require 'org) (org-set-regexps-and-options) (hack-local-variables)))" "${file}" -- $args
exit
<# powershell open
#+end_src

#+call: shebang-elisp() :exports none

# FIXME TODO need a way to override the emacs command so that
# a specific version of emacs can be specified via the environment
# instead of via PATH ? or what, modify the path? a nasty shortcoming
# admittedly the way I test this is by manually change the text in
# the block which is bad, but also critical for portability I think?

This block acts as a shebang that makes Org files executable on
=bash=, =bash --posix=, =zsh=, =dash=, =pwsh=, and =powershell=.  It
may also work on other posix shells, but they have not been tested.
For =pwsh= and =powershell= the file should be symlinked to have a
=.ps1= file extension.

The shebang block must come before the first line of the file that
does not start with =#=.

In this file the block is visible to illustrate how it works.  It uses
=#+header: :exports code= so that it is easy to copy and paste the
block into other files with =:exports none= set so that it is
invisible for export.

Annoyingly we have to use =mktemp -d= in order to add ~=~ to the path
because not only does =dash= not support the =function= keyword, but
it also arbitrarily prevents defining a function with the name ~=~. As
a result the only portable way to get ~=~ on path is to create an
executable file for it.

* Windows
On windows org files must be symlinked to have a =.ps1= file
extension.  You can use the following powershell function to create
the symlinks.  Beware that certain posix tools for windows such as
git-bash have a version of =ln= that doesn't actually create symlinks.

#+begin_src powershell
function make-link ($target, $link) { New-Item -Path $link -ItemType SymbolicLink -Value $target }
#+end_src

You can then run the following.
#+begin_src powershell
make-link shebang.org shebang.ps1
#+end_src

If you want to use the file as a command create an alias.
#+begin_src powershell
New-Alias test-orgstrap-shebang (Get-ChildItem shebang.ps1).FullName -Force
#+end_src
# TODO create this as part of --install

There is a rare bug that can happen if you try to run a file with dos
line endings on a system that expects posix line endings. If you do
this you will encounter errors if there are any "blank" lines before
the shebang block because bash and friends will try to run a command
named the carriage return variable =\r=. To fix this either remove
the blank lines or add a =#= at the start of the line.

* Details
A breakdown of the elisp that appears in the =-eval= string.
#+name: shebang-explication
#+begin_src elisp :lexical yes
(let (vc-follow-symlinks) ; don't follow symlinks as there is no way
  ;; to prevent them from opening in `org-mode' due to an oversight
  ;; in `vc-follow-link' if for whatever reason you need to work
  ;; from the truename of the file then the adjustment can be made
  ;; in the orgstrap block itself

  (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp))))
  ;; allow elisp blocks to run without prompting, this bypasses the
  ;; usual orgstrap safeguards but when running as a script there are
  ;; other mechanisms that preven automatic execution we use `intern'
  ;; here to avoid having to escape strings which breaks powershell

  (let ((file (pop argv)) ; file is passed on argv to avoid needing to
        ;; escape double quotes with the nice side effect that it can
        ;; handle file names with a literal double quote

        ;; explicitly set to nil to work around the dos literal local
        ;; variables issue, it seems the `find-file-literally' still
        ;; reads local variables even if it does not set them
        enable-local-variables)
    (find-file-literally file)
    ;; `find-file-literally' avoids org-mode which can take over 500ms
    (end-of-line)
    (when (eq (char-before) ?\^m) ; if crlf line ending detected
      ;; revert buffer to avoid dos literal local variables issue
      (let ((coding-system-for-read 'utf-8))
        (revert-buffer nil t t))))

  (let ((enable-local-eval t) ; when running as a script there
        ;; are other means of preventing arbitrary execution
        (enable-local-variables :all) ; allow all local variables

        ;; fake setting the major mode to org-mode so that
        ;; `org-set-regexp-and-options' will trigger correctly
        (major-mode 'org-mode))
    ;; we do not set `enable-local-eval' and `enable-local-variables'
    ;; in the outer let due to a bug in Emacs 26 and 27 inside of
    ;; `find-file-noselect' where `enable-local-eval' is not properly
    ;; shadowed see Emacs a1fd11a28f3c2f4f81163765dd3b53e5ce0b39cf
    (require 'org) ; `org-set-regexps-and-options' is not an autoload
    ;; so we have to require org to get it
    (org-set-regexps-and-options) ; `org-complex-heading-regexp' must be bound
    ;; otherwise orgstrap blocks that use noweb will cause errors

    ;; run the orgstrap block without entering org-mode, this saves lots of time
    (hack-local-variables)))
#+end_src

#+name: shebang-elisp
#+begin_src elisp :exports none
(orgstrap--with-block "shebang-explication"
  (let (print-level print-length)
    (prin1-to-string (read body))))
#+end_src

** Old approach
This is an older version of the block that is more verbose and that
also does not work on Debian and friends because =dash= does not
support the =function= keyword. The development workflow is also
significantly more annoying and prone to break because the checksums
always have to be updated and kept in sync.

#+name: orgstrap-shebang-block-old
#+begin_src bash :eval never :results none
function = () { :; }
function silentlycontinue () { :; }

$ErrorActionPreference= "silentlycontinue"
null="/dev/stdout"
__FILE="${0}"
__PARGS=${@}
function posix () {
    test $ZSH_VERSION && { setopt shwordsplit; _IFS=$IFS; unset IFS; }
    emacs --quick --batch --load ~/.emacs.d/orgstrap-developer-checksums.el --load ~/.emacs.d/orgstrap-batch-helper.el --visit "${__FILE}" -- ${__PARGS}
    test $ZSH_VERSION && { unsetopt shwordsplit; IFS=$_IFS; }
}
"posix" > $null
"exit" > $null
$ErrorActionPreference= "Continue"

$org=$MyInvocation.MyCommand.Source
emacs --quick --batch --load ~/.emacs.d/orgstrap-batch-helper.el --visit $org -- $args
exit
<# open powershell comment
#+end_src

* Issues
** TODO cannot use a ~mode: org;~ local variable, it triggers ~hack-local-variables~ twice somehow
setting an explicit mode =mode: org;= in the file causes hack local variables to try to run itself twice recursively.
#+begin_src bash :eval never
emacs -q -Q -eval "(let ((file (pop argv))) (find-file-literally file) (hack-local-variables))" "./shebang.org"
#+end_src

* Bootstrap :noexport:

#+name: nowhere
#+begin_src elisp
(message "noweb working")
#+end_src

#+name: orgstrap
#+begin_src elisp :results none :lexical yes :noweb yes
(defvar sigh 0)
(setq sigh (1+ sigh))
;(toggle-debug-on-error)
(when noninteractive
  (setq user-emacs-directory "~/.emacs.d/orgstrap-test-6/")
  (setq package-user-dir (concat user-emacs-directory (format "elpa-%s" emacs-major-version)))
  )

(when (> sigh 2)
 (toggle-debug-on-error)
 (error "WHAT HAVE YOU DONE"))
;(require 'cl-lib)
;(require 'cl-generic)
;(require 'loadhist)

(defvar ow--org-to-reload '())

(defun org-compat-unload-function ()
  (message "WHAEEEEEEEEEEEEEEEEEEEEEEEE")
  ;; `org-compat' is the first require for org and it itself requires org-macs
  ;; if it is not fake unloaded then org-macs will not be rerequired, however
  ;; we cannot unload org-compat itself because it defines variables that are
  ;; also defined elsewhere, bug in org-compat wrt `pcomplete-uniqify-list'?
  (setq features (cl-delete-if (lambda (s) (eq s 'org-compat)) features)))

(defun ow--org-unload-all-features ()
  "I'm pretty sure we only need to call this inside `ow-enable-use-package'.
Verify that this is actually the case. It seems that sometimes on a first run
the call to reload would need to be after the new org version was downloaded."
  ;; apparently unload-feature has a giant blast radius
  ;; and somehow its things like the alias for `pcomplete-uniqify-list'
  ;; (see comment below on `org-compat')
  (let ((out (cl-loop
              for f in features
              ;; XXX `org-compat' redefinitions can remove definitions that have been defined elsewhere
              ;; and since emacs doesn't keep track of how many times something has been defined in a
              ;; separate place (ie 1 + 1 = 1) it removes an alias defined and needed elsewhere
              ;; SUPER unforunately `org-compat' is absolutely critical for reloading `org-macs'
              when (or (and (string-match "^\\(org\\|ob\\)-" (symbol-name f)) '(not (eq f 'org-compat)))
                       ;;(eq f 'org) ; WAT somehow this causes infinite attempts to rerun this file !? ; ah right because require 'org will cause local variables to be re-executed duh
                       nil)
              collect (progn (message "org feature: %s" f) (unload-feature f 'force) f))))

    (let (major-mode) ; enable-local-eval
      ;; for some reason unloading org causes the buffer to reload itself?
      ;; an not quite, it is `unload--set-major-mode' is causing all the issues here
      ;; it looks like setting `major-mode' to nil for a moment will resolve the issue
      (unload-feature 'org))
    ;; on rerequire org must be last so that `org-macs' is already loaded, otherwise `org-assert-version' will fail
    '
    (cons 'org-macs (append out '(org)))
    (cons 'org-macs (cons 'org out))
    ))

(defun ow--org-reload-features ()
  ;; I swear we had this all working ... and now something to tweaked and is broken again
  ;; XX oh ... its the bloody bytecode it would seem
  (cl-loop for f in ow--org-to-reload
           do (progn
                (message "f: %s" f)
                (require f)
                (message "asserting version ... %s" f)
                (org-assert-version))))

'
(defun loadhist-unload-element (e)
;(cl-defmethod loadhist-unload-element ((e (head cl-defmethod)))
  "this runs over every bloody symbol wtf"
  ;;(message "the wat %S %S" e (type-of e))
  '
  (cond
   ((consp e)
    ;;(message "watoff cons %s" e)
    (pcase (car e)
      ('defun (fmakunbound (cdr e)))
      ('require (message "don't bother require"))
      ('provide (message "don't bother provide"))
      ('defface (message "can't really remove defface"))
      (t (message "unhanded %s" e))))
   ((symbol-function e) (fmakunbound e))
   ((symbolp e) (progn (message "WHAT THE WAT ARE YOU DOING %S" e) (makunbound e)))
   (t (message "wating what %S" e))
   )
  nil)


(message "I am an executable Org file!") ; (ref:test)
(message "file name is: %S" buffer-file-name)
(message "file truename is: %S" buffer-file-truename)
<<nowhere>>
(unless (featurep 'ow) (load "~/git/orgstrap/ow.el"))

(when noninteractive
  (setq ow--org-to-reload (ow--org-unload-all-features))
  (message "ootr: %s" ow--org-to-reload))

'
(let ((sigh (org-release)))
  (message "WATING SIGH %s" sigh)
  (defun old-org-release () sigh))
'
(defmacro org-assert-version () 't)

;org-confirm-babel-evaluate
(when t
  (ow-enable-use-package)
  ;;(assq-delete-all 'org package-alist)
  (message "wat-pal: %s" (assq 'org package-alist))
  (message "wat-pactl: %s" (assq 'org package-activated-list))
  (message "wat-psp: %s" (assq 'org package-selected-packages))
  (assq-delete-all 'org package--builtins)
  (assq-delete-all 'org package--builtin-versions)
  ;; yep, if org is already installed at this point we need to call
  ;; reload before anyone tries to load org again because org-macs
  ;; will not be required correctly
  ;; this will destroy the universe
  (let ((no-byte-compile nil))
    ;; XXX so apparently byte compiling can happen, but we need to build and install org up here
    ;; before or something to avoid some issue below or something ??!
    (ow-use-packages org ;(org :no-require t)
                                ))
  (when (assq 'org package-alist)
     (message "wat weheheheheh")
     (ow--org-reload-features)
     )
  ;;(mapcar #'require ow--org-to-reload)
  (message "we're done here?" )
                                        ;(message "%s" features)
                                        ;(cl-loop for f in features when (regexp-match-string (symbol-name f)))
                                        ;(unload-feature 'org-macs 'force)
                                        ;(unload-feature 'org 'force)
  ;;(require 'org))
  (let ((gt26 (>= emacs-major-version 26)))
    (ow-use-packages
     csv-mode
     rainbow-delimiters
     orgstrap ; XXX unload of org causes issues here
     (when gt26 jupyter)
     (cypher-mode
      :init
      (defface cypher-pattern-face
        '((t :foreground "DeepPink" :background unspecified :bold t))
        "Face for pattern struct." :group 'cypher-faces))
     sparql-mode
     ob-cypher
     (org
      :no-require t ; when loading via orgstrap have to use no-require to avoid missing def issues ??
      :mode ("\\.org\\'" . org-mode)
      :bind ("<f5>" . ow-babel-eval-closest-block)
      :init
                                        ;(require 'org)
                                        ;(require 'ob)
                                        ;(toggle-debug-on-error)
                                        ;(require 'org-macs)
                                        ;(defalias 'org-release #'old-org-release)
                                        ;(message "ffs or %s" (org-release))
                                        ;(require 'ob-python)
                                        ;(message "WAT")
                                        ;(message "ffs %s" (org-version))
      ;(require 'org)
      (message "not quiet it seems?")
      ;(symbol-function #'org-babel-do-load-languages)
      ;; some aliasing asdfwatery it seems?
      ;; #'pcomplete-uniquify-list
      ;; #'pcomplete-uniq^ify-list
      ;tramp-use-absolute-autoload-file-names
      ;(require 'pcomplete)
      ;'org-macs
      (message "what the asdfwatery is this? %S" (symbol-function #'pcomplete-uniquify-list))
      ;(require 'python)
      (message "here?")
      ;org-babel-tangle-lang-exts
      ;(require 'ob-tangle) ; not needed if we do the reload above ?
      (org-babel-do-load-languages
       'org-babel-load-languages
       `((cypher . t)
         (sparql . t)
         (python . t)
         ,(when gt26 '(jupyter . t))))))))

(ow-cli-gen
    ((:test))
  (message "running ow-cli-gen block ..."))
(message "post cli-gen")
;(require 'ob)
;(require 'ob-core)
#+end_src

[[(test)]] Make sure coderefs work.

** Local Variables :ARCHIVE:
# close powershell comment #>
# Local Variables:
# eval: (progn (setq-local orgstrap-min-org-version "8.2.10") (let ((a (org-version)) (n orgstrap-min-org-version)) (or (fboundp #'orgstrap--confirm-eval) (not n) (string< n a) (string= n a) (error "Your Org is too old! %s < %s" a n))) (defun orgstrap-norm-func--dprp-1-0 (body) (let ((p (read (concat "(progn\n" body "\n)"))) (m '(defun defun-local defmacro defvar defvar-local defconst defcustom)) print-quoted print-length print-level) (cl-labels ((f (b) (cl-loop for e in b when (listp e) do (or (and (memq (car e) m) (let ((n (nthcdr 4 e))) (and (stringp (nth 3 e)) (or (cl-subseq m 3) n) (f n) (or (setcdr (cddr e) n) t)))) (f e))) p)) (prin1-to-string (f p))))) (unless (boundp 'orgstrap-norm-func) (defvar-local orgstrap-norm-func orgstrap-norm-func-name)) (defun orgstrap-norm-embd (body) (funcall orgstrap-norm-func body)) (unless (fboundp #'orgstrap-norm) (defalias 'orgstrap-norm #'orgstrap-norm-embd)) (defun orgstrap-org-src-coderef-regexp (_fmt &optional label) (let ((fmt org-coderef-label-format)) (format "\\([:blank:]*\\(%s\\)[:blank:]*\\)$" (replace-regexp-in-string "%s" (if label (regexp-quote label) "\\([-a-zA-Z0-9_][-a-zA-Z0-9_ ]*\\)") (regexp-quote fmt) nil t)))) (unless (fboundp #'org-src-coderef-regexp) (defalias 'org-src-coderef-regexp #'orgstrap-org-src-coderef-regexp)) (defun orgstrap--expand-body (info) (let ((coderef (nth 6 info)) (expand (if (org-babel-noweb-p (nth 2 info) :eval) (org-babel-expand-noweb-references info) (nth 1 info)))) (if (not coderef) expand (replace-regexp-in-string (org-src-coderef-regexp coderef) "" expand nil nil 1)))) (defun orgstrap--confirm-eval-portable (lang _body) (not (and (member lang '("elisp" "emacs-lisp")) (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info))) (body-normalized (orgstrap-norm body)) (content-checksum (intern (secure-hash orgstrap-cypher body-normalized)))) (eq orgstrap-block-checksum content-checksum))))) (unless (fboundp #'orgstrap--confirm-eval) (defalias 'orgstrap--confirm-eval #'orgstrap--confirm-eval-portable)) (let (enable-local-eval) (vc-find-file-hook)) (let ((ocbe org-confirm-babel-evaluate) (obs (org-babel-find-named-block "orgstrap"))) (if obs (unwind-protect (save-excursion (setq-local orgstrap-norm-func orgstrap-norm-func-name) (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval) (goto-char obs) (org-babel-execute-src-block)) (when (eq org-confirm-babel-evaluate #'orgstrap--confirm-eval) (setq-local org-confirm-babel-evaluate ocbe)) (org-set-visibility-according-to-property)) (warn "No orgstrap block."))))
# End:
